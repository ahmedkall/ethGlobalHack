/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  59140: {
    // Linea testnet chain ID
    ZKBounty: {
      address: "0x1085CC7f389d2ee9D20F4cd4b06984aC1Aa00bdF",
      abi: [
        {
          inputs: [],
          name: "ReentrancyGuardReentrantCall",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "address",
              name: "submitter",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint8",
              name: "bountyType",
              type: "uint8",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "reward",
              type: "uint256",
            },
          ],
          name: "BountySubmitted",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "BountyWithdrawn",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "address",
              name: "hunter",
              type: "address",
            },
          ],
          name: "HunterRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "issuer",
              type: "address",
            },
          ],
          name: "IssuerRegistered",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "ReportApproved",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "ReportRejected",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
            {
              indexed: true,
              internalType: "address",
              name: "worker",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "reportHash",
              type: "bytes32",
            },
          ],
          name: "ReportSubmitted",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
            {
              internalType: "address payable",
              name: "hunter",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32",
            },
          ],
          name: "finalizeReport",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "getBounty",
          outputs: [
            {
              internalType: "address",
              name: "submitter",
              type: "address",
            },
            {
              internalType: "uint8",
              name: "bountyType",
              type: "uint8",
            },
            {
              internalType: "uint256",
              name: "reward",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "bountyHash",
              type: "string",
            },
            {
              internalType: "string",
              name: "uri",
              type: "string",
            },
            {
              internalType: "bool",
              name: "isApproved",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
          ],
          name: "getBountyAtIndex",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getBountyIds",
          outputs: [
            {
              internalType: "bytes32[]",
              name: "",
              type: "bytes32[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "getBountyReward",
          outputs: [
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "getHuntersInBounty",
          outputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
            {
              internalType: "address",
              name: "hunter",
              type: "address",
            },
          ],
          name: "getReportHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "getSubmittedReportsInBounty",
          outputs: [
            {
              internalType: "bytes32[]",
              name: "",
              type: "bytes32[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "issuer",
              type: "address",
            },
          ],
          name: "isRegisteredIssuer",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "registerIssuer",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "registerToBounty",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint8",
              name: "bountyType",
              type: "uint8",
            },
            {
              internalType: "uint256",
              name: "reward",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "bountyHash",
              type: "string",
            },
          ],
          name: "submitBounty",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "reportHash",
              type: "bytes32",
            },
          ],
          name: "submitReport",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "bountyId",
              type: "bytes32",
            },
          ],
          name: "withdrawUnapprovedBounty",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
